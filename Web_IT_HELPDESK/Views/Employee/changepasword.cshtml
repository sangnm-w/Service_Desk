@model Web_IT_HELPDESK.ViewModels.ChangePasswordViewModel

@{
    ViewBag.Title = "Change Password";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section Style {
    <style>

        /* Full-width input fields */
        input[type=text], input[type=password] {
            width: 100%;
            padding: 15px;
            margin: 5px 0 22px 0;
            display: inline-block;
            border: none;
            background: #f1f1f1;
        }

            input[type=text]:focus, input[type=password]:focus {
                background-color: #ddd;
                outline: none;
            }

        /* Overwrite default styles of hr */
        hr {
            border: 1px solid #f1f1f1;
            margin-bottom: 25px;
        }

        /* Set a style for the submit button */
        .registerbtn {
            background-color: #4CAF50;
            color: white;
            padding: 16px 20px;
            margin: 8px 0;
            border: none;
            cursor: pointer;
            width: 100%;
            opacity: 0.9;
        }

            .registerbtn:hover {
                opacity: 1;
            }

        .changepsw i {
            display: inline !important;
            margin-left: -30px;
        }
    </style>
}
<div class="col-md-12 panel-info">
    <div class="content-box-large changepsw">
        @using (Html.BeginForm())
        {
            <h1>Change Password</h1>
            <p>Please fill in this form to change your password.</p>
            <hr>
            @Html.LabelFor(model => model.OldPsw)
            @Html.EditorFor(model => model.OldPsw, new { htmlAttributes = new { @id = "OldPsw" } })
            <i class="glyphicon glyphicon-eye-open" id="toggleOldPsw"></i>
            @Html.ValidationMessageFor(model => model.OldPsw, "", new { @class = "text-danger" })

            @Html.LabelFor(model => model.NewPsw)
            @Html.EditorFor(model => model.NewPsw, new { htmlAttributes = new { @id = "NewPsw" } })
            <i class="glyphicon glyphicon-eye-open" id="toggleNewPsw"></i>
            @Html.ValidationMessageFor(model => model.NewPsw, "", new { @class = "text-danger" })

            @Html.LabelFor(model => model.NewPsw_Confirm)
            @Html.EditorFor(model => model.NewPsw_Confirm, new { htmlAttributes = new { @id = "NewPswConfirm" } })
            <i class="glyphicon glyphicon-eye-open" id="toggleNewPswConfirm"></i>
            @Html.ValidationMessageFor(model => model.NewPsw_Confirm, "", new { @class = "text-danger" })
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <hr>

            <button type="submit" class="registerbtn">Submit</button>
        }
    </div>
</div>
@section Script{
    <script>
        console
        const toggleOldPsw = $('#toggleOldPsw');
        const OldPsw = $('#OldPsw');

        toggleOldPsw.on('click', function (e) {
            // toggle the type attribute
            const type = OldPsw.attr('type') === 'password' ? 'text' : 'password';
            OldPsw.attr('type', type);
            // toggle the eye slash icon
            $(this).toggleClass('glyphicon-eye-close');
        });

        const toggleNewPsw = $('#toggleNewPsw');
        const NewPsw = $('#NewPsw');

        toggleNewPsw.on('click', function (e) {
            // toggle the type attribute
            const type = NewPsw.attr('type') === 'password' ? 'text' : 'password';
            NewPsw.attr('type', type);
            // toggle the eye slash icon
            $(this).toggleClass('glyphicon-eye-close');
        });

        const toggleNewPswConfirm = $('#toggleNewPswConfirm');
        const NewPswConfirm = $('#NewPswConfirm');

        toggleNewPswConfirm.on('click', function (e) {
            // toggle the type attribute
            const type = NewPswConfirm.attr('type') === 'password' ? 'text' : 'password';
            NewPswConfirm.attr('type', type);
            // toggle the eye slash icon
            $(this).toggleClass('glyphicon-eye-close');
        });
    </script>
}